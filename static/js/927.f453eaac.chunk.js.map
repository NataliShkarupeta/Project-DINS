{"version":3,"file":"static/js/927.f453eaac.chunk.js","mappings":"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","sources":["pages/ListPictures/ListPictures.jsx"],"sourcesContent":["import {\n  AboutOrder,\n  Li,\n  Ul,\n  WrapPicture,\n} from 'components/Gallery/Gallery.styled';\nimport { CommonButton } from 'components/common/commonButton/button';\nimport { DefaultComponent } from 'components/common/default/defaultComponent';\nimport { memo, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\nimport { S3_URL } from 'service/basicUrl';\nimport { getAllPictures, getPlacePictures } from 'service/gallertService';\nimport {\n  AllAndStockWords,\n  Input,\n  LabPlaces,\n  LiPlaces,\n  NavLinkButton,\n  NavPlaces,\n  PlacesContent,\n  PlacesInput,\n  TextPlace,\n  UlPlaces,\n  WrapCheckBlok,\n  WrapCheckboxes,\n  WrapPlaces,\n} from './ListPictures.styled';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { WrapDots } from 'components/PictureInfo/PictureInfo.styled';\nimport { TfiArrowUp } from 'react-icons/tfi';\nimport { Button } from 'components/common/commonButton/button.styled';\nimport { useFeatureStore } from 'components/Features/Features/store';\nimport { useMedia } from 'react-use';\n\nconst ListPictures = memo(() => {\n  const [pictures, setPicures] = useState({});\n  const [inStock, setInStock] = useState({});\n  const [selectedItem, setSelectedItem] = useState('Всі');\n  const [loading, setLoading] = useState(false);\n  const [scroll, setScroll] = useState(0);\n\n  const location = useLocation();\n  const [t] = useTranslation();\n  const refTop = useFeatureStore(state => state.refTop);\n  const refTopMob = useFeatureStore(state => state.refTopMob);\n  const isMobile = useMedia('(max-width: 541px)');\n  const isTabletM = useMedia('(max-width: 721px)');\n  const refKey = useFeatureStore(state => state.refKey);\n  const setRefKey = useFeatureStore(state => state.setRefKey);\n\n  useEffect(() => {\n    setLoading(true);\n    getAllPictures()\n      .then(res => setPicures(res))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (refKey && Object.values(pictures).length !== 0) {\n      const refId = Object.values(pictures).find(el => el._id === refKey);\n      const mainRoot = document.getElementById(refId._id);\n      mainRoot.scrollIntoView({offset:100});\n      setRefKey(null);\n    }\n  }, [pictures, refKey, setRefKey]);\n\n  const handleScroll = () => {\n    setScroll(window.scrollY);\n  };\n  \n  const onChangeHandlerInStock = event => {\n    setSelectedItem(event.target.name);\n    findInStockPict();\n  };\n\n  const onChangeHandler = event => {\n    setSelectedItem(event.target.name);\n  };\n\n  const places = [\n    t('gallaryPage.listPictures.livingRoom'),\n    t('gallaryPage.listPictures.kitchen'),\n    t('gallaryPage.listPictures.bedroom'),\n    t('gallaryPage.listPictures.childrenRoom'),\n    t('gallaryPage.listPictures.office'),\n  ];\n\n  const findInStockPict = () => {\n    let inStockPict = Object.values(pictures).filter(\n      item => item.inStock === 'так'\n    );\n    setInStock(inStockPict);\n  };\n\n  const getPicturesByPlaces = place => {\n    setPicures({});\n    setSelectedItem('Всі');\n    setLoading(true);\n    getPlacePictures(place)\n      .then(res => setPicures(res))\n      .finally(() => setLoading(false));\n  };\n\n  const getPictures = event => {\n    if (event.target.checked === false) {\n      setSelectedItem('Всі');\n      setLoading(true);\n      getAllPictures()\n        .then(res => setPicures(res))\n        .finally(() => setLoading(false));\n    }\n  };\n\n  if (!pictures || !inStock) {\n    return (\n      <>\n        <NavLinkButton to={'/painting'}>\n          <CommonButton text={t('button.back')} />\n        </NavLinkButton>\n        <DefaultComponent>\n          <ThreeDots />\n          <p>{t('defoultText')} </p>\n        </DefaultComponent>\n      </>\n    );\n  }\n\n  const topButton = {\n    position: 'fixed',\n    bottom: '34px',\n    right: '34px',\n    zIndex: '5',\n    backgroundColor: 'purple',\n    borderColor: 'transparent',\n  };\n  const topButtonMob = {\n    position: 'fixed',\n    bottom: '24px',\n    right: '24px',\n    zIndex: '5',\n    backgroundColor: 'purple',\n    borderColor: 'transparent',\n  };\n\n  return (\n    <>\n      <NavLinkButton to={'/painting'}>\n        <CommonButton text={t('button.back')} />\n      </NavLinkButton>\n\n      <AboutOrder>{t('gallaryPage.aboutOrder')}</AboutOrder>\n\n      {scroll > document.documentElement.clientHeight &&\n        (isMobile ? (\n          <Button\n            style={topButtonMob}\n            onClick={() =>\n              refTopMob.current.scrollIntoView({ behavior: 'smooth' })\n            }\n          >\n            <TfiArrowUp size={15} color=\"white\" />\n          </Button>\n        ) : (\n          <Button\n            style={isTabletM ? topButtonMob : topButton}\n            onClick={() =>\n              refTop.current.scrollIntoView({ behavior: 'smooth' })\n            }\n          >\n            <TfiArrowUp size={isTabletM ? 15 : 20} color=\"white\" />\n          </Button>\n        ))}\n\n      <WrapCheckboxes>\n        <WrapPlaces>\n          <NavPlaces>\n            <PlacesInput\n              id=\"menu-cb\"\n              type=\"checkbox\"\n              onChange={getPictures}\n            ></PlacesInput>\n            <LabPlaces htmlFor=\"menu-cb\">\n              {t('gallaryPage.listPictures.filters')}\n            </LabPlaces>\n            <PlacesContent>\n              <UlPlaces>\n                {places.map(place => (\n                  <LiPlaces key={place}>\n                    <TextPlace\n                      onClick={() => getPicturesByPlaces(place.toLowerCase())}\n                    >\n                      {place}\n                    </TextPlace>\n                  </LiPlaces>\n                ))}\n              </UlPlaces>\n            </PlacesContent>\n          </NavPlaces>\n        </WrapPlaces>\n\n        <WrapCheckBlok>\n          <label>\n            <Input\n              name=\"Всі\"\n              type=\"checkbox\"\n              onChange={onChangeHandler}\n              checked={selectedItem === 'Всі'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.all')}\n            </AllAndStockWords>\n          </label>\n          <label>\n            <Input\n              name=\"В наявності\"\n              type=\"checkbox\"\n              onChange={onChangeHandlerInStock}\n              checked={selectedItem === 'В наявності'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.inStock')}\n            </AllAndStockWords>\n          </label>\n        </WrapCheckBlok>\n      </WrapCheckboxes>\n\n      {loading && (\n        <WrapDots>\n          <ThreeDots />\n        </WrapDots>\n      )}\n      {selectedItem === 'Всі' && pictures.length === 0 && (\n        <DefaultComponent>\n          <p>{t('gallaryPage.listPictures.notForPlace')}</p>\n        </DefaultComponent>\n      )}\n      {selectedItem === 'Всі' ? (\n        <Ul>\n          {pictures &&\n            Object.values(pictures).map(({ title1, image, _id }) => (\n              <Li key={_id} id={_id}>\n                <Link\n                  to={`/painting/list_pictures/${_id}`}\n                  state={{ from: location }}\n                >\n                  <WrapPicture>\n                    {loading && (\n                      <WrapDots>\n                        <ThreeDots />\n                      </WrapDots>\n                    )}\n                    <img\n                      loading=\"lazy\"\n                      src={`${S3_URL}/${image}`}\n                      alt={title1}\n                    />\n                  </WrapPicture>\n                </Link>\n              </Li>\n            ))}\n        </Ul>\n      ) : Object.keys(inStock).length === 0 ? (\n        <DefaultComponent>\n          <p>{t('gallaryPage.listPictures.ifNotAvailable')}</p>\n        </DefaultComponent>\n      ) : (\n        <Ul>\n          {Object.values(inStock).map(({ title1, image, _id }) => (\n            <Li key={_id}>\n              <Link\n                to={`/painting/list_pictures/${_id}`}\n                state={{ from: location }}\n              >\n                <WrapPicture>\n                  <img src={`${S3_URL}/${image}`} alt={title1} />\n                </WrapPicture>\n              </Link>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </>\n  );\n});\n\nexport default ListPictures;\n"],"names":["ListPictures","memo","useState","pictures","setPicures","inStock","setInStock","selectedItem","setSelectedItem","loading","setLoading","scroll","setScroll","location","useLocation","useTranslation","t","refTop","useFeatureStore","state","refTopMob","isMobile","useMedia","isTabletM","refKey","setRefKey","useEffect","getAllPictures","then","res","finally","window","addEventListener","handleScroll","removeEventListener","Object","values","length","refId","find","el","_id","document","getElementById","scrollIntoView","offset","scrollY","places","findInStockPict","inStockPict","filter","item","to","text","topButtonMob","position","bottom","right","zIndex","backgroundColor","borderColor","documentElement","clientHeight","style","onClick","current","behavior","size","color","id","type","onChange","event","target","checked","htmlFor","map","place","getPlacePictures","getPicturesByPlaces","toLowerCase","name","Ul","title1","image","Li","from","src","S3_URL","alt","keys"],"sourceRoot":""}