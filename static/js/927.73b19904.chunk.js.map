{"version":3,"file":"static/js/927.73b19904.chunk.js","mappings":"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","sources":["pages/ListPictures/ListPictures.jsx"],"sourcesContent":["// import { useFeatureStore } from 'components/Features/Features/store';\nimport {\n  AboutOrder,\n  Li,\n  Ul,\n  WrapPicture,\n} from 'components/Gallery/Gallery.styled';\nimport { CommonButton } from 'components/common/commonButton/button';\nimport { DefaultComponent } from 'components/common/default/defaultComponent';\nimport { memo, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\nimport { BASIC_URL } from 'service/basicUrl';\nimport {\n  getAllPictures,\n  getInStockPictures,\n  getPlacePictures,\n} from 'service/gallertService';\nimport {\n  AllAndStockWords,\n  Input,\n  LabPlaces,\n  LiPlaces,\n  NavLinkButton,\n  NavPlaces,\n  PlacesContent,\n  PlacesInput,\n  TextPlace,\n  UlPlaces,\n  WrapCheckBlok,\n  WrapCheckboxes,\n  WrapPlaces,\n} from './ListPictures.styled';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { WrapDots } from 'components/PictureInfo/PictureInfo.styled';\n\nconst ListPictures = memo(() => {\n  const [pictures, setPicures] = useState({});\n  const [pictByPlace, setPictByPlace] = useState({});\n  const [inStock, setInStock] = useState({});\n  const [selectedItem, setSelectedItem] = useState('Всі');\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const [t] = useTranslation();\n\n  useEffect(() => {\n    setLoading(true);\n    getAllPictures()\n      .then(res => setPicures(res))\n      .finally(() => setLoading(false));\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n    getInStockPictures()\n      .then(res => setInStock(res))\n      .finally(() => setLoading(false));\n     \n  }, []);\n\n  const onChangeHandler = event => {\n    setSelectedItem(event.target.name);\n  };\n\n  const places = [\n    t('gallaryPage.listPictures.livingRoom'),\n    t('gallaryPage.listPictures.kitchen'),\n    t('gallaryPage.listPictures.bedroom'),\n    t('gallaryPage.listPictures.childrenRoom'),\n    t('gallaryPage.listPictures.office'),\n  ];\n\n  const getPicturesByPlaces = place => {\n\n    setLoading(true);\n    getPlacePictures(place)\n      .then(res => setPictByPlace(res))\n      .finally(() => setLoading(false));\n\n   ;\n   console.log(pictByPlace)\n  };\n\n  if ((!pictures, !inStock)) {\n    return (\n      <>\n        <NavLinkButton to={'/painting'}>\n          <CommonButton text={t('button.back')} />\n        </NavLinkButton>\n        <DefaultComponent>\n          <ThreeDots />\n          <p>{t('defoultText')} </p>\n        </DefaultComponent>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <NavLinkButton to={'/painting'}>\n        <CommonButton text={t('button.back')} />\n      </NavLinkButton>\n      {loading && (\n        <WrapDots>\n          <ThreeDots />\n        </WrapDots>\n      )}\n      <AboutOrder>{t('gallaryPage.aboutOrder')}</AboutOrder>\n\n      <WrapCheckboxes>\n        <WrapPlaces>\n          <NavPlaces>\n            <PlacesInput id=\"menu-cb\" type=\"checkbox\"></PlacesInput>\n            <LabPlaces htmlFor=\"menu-cb\">\n              {t('gallaryPage.listPictures.filters')}\n            </LabPlaces>\n            <PlacesContent>\n              <UlPlaces>\n                {places.map(place => (\n                  <LiPlaces key={place}>\n                    <TextPlace onClick={()=>getPicturesByPlaces(place)}>\n                      {place}\n                    </TextPlace>\n                  </LiPlaces>\n                ))}\n              </UlPlaces>\n            </PlacesContent>\n          </NavPlaces>\n        </WrapPlaces>\n\n        <WrapCheckBlok>\n          <label>\n            <Input\n              name=\"Всі\"\n              type=\"checkbox\"\n              onChange={onChangeHandler}\n              checked={selectedItem === 'Всі'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.all')}\n            </AllAndStockWords>\n          </label>\n          <label>\n            <Input\n              name=\"В наявності\"\n              type=\"checkbox\"\n              onChange={onChangeHandler}\n              checked={selectedItem === 'В наявності'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.inStock')}\n            </AllAndStockWords>\n          </label>\n        </WrapCheckBlok>\n      </WrapCheckboxes>\n      {selectedItem === 'Всі' ? (\n        <Ul>\n          {pictures &&\n            Object.values(pictures).map(({ title1, image, _id }) => (\n              <Li key={_id}>\n                <Link\n                  to={`/painting/list_pictures/${_id}`}\n                  state={{ from: location }}\n                >\n                  <WrapPicture>\n                    <img src={`${BASIC_URL}/${image}`} alt={title1} />\n                  </WrapPicture>\n                </Link>\n              </Li>\n            ))}\n        </Ul>\n      ) : Object.keys(inStock).length === 0 ? (\n        <DefaultComponent>\n          <p>{t('gallaryPage.listPictures.ifNotAvailable')}</p>\n        </DefaultComponent>\n      ) : (\n        <Ul>\n          {Object.values(inStock).map(({ title1, image, _id }) => (\n            <Li key={_id}>\n              <Link\n                to={`/painting/list_pictures/${_id}`}\n                state={{ from: location }}\n              >\n                <WrapPicture>\n                  <img src={`${BASIC_URL}/${image}`} alt={title1} />\n                </WrapPicture>\n              </Link>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </>\n  );\n});\n\nexport default ListPictures;\n"],"names":["ListPictures","memo","useState","pictures","setPicures","pictByPlace","setPictByPlace","inStock","setInStock","selectedItem","setSelectedItem","loading","setLoading","location","useLocation","useTranslation","t","useEffect","getAllPictures","then","res","finally","getInStockPictures","onChangeHandler","event","target","name","places","to","text","id","type","htmlFor","map","place","onClick","getPlacePictures","console","log","getPicturesByPlaces","onChange","checked","Ul","Object","values","title1","image","_id","Li","state","from","src","BASIC_URL","alt","keys","length"],"sourceRoot":""}