{"version":3,"file":"static/js/958.1bc6be1c.chunk.js","mappings":"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","sources":["../node_modules/src/InView.tsx","pages/ListPictures/ListPictures.jsx"],"sourcesContent":["import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import {\n  AboutOrder,\n  Li,\n  Ul,\n  WrapPicture,\n} from 'components/Gallery/Gallery.styled';\nimport { CommonButton } from 'components/common/commonButton/button';\nimport { DefaultComponent } from 'components/common/default/defaultComponent';\nimport { memo, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useLocation } from 'react-router-dom';\nimport { S3_URL } from 'service/basicUrl';\nimport { getAllPictures, getPlacePictures } from 'service/gallertService';\nimport {\n  AllAndStockWords,\n  Input,\n  LabPlaces,\n  LiPlaces,\n  NavLinkButton,\n  NavPlaces,\n  PlacesContent,\n  PlacesInput,\n  TextPlace,\n  UlPlaces,\n  WrapCheckBlok,\n  WrapCheckboxes,\n  WrapPlaces,\n} from './ListPictures.styled';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { WrapDots } from 'components/PictureInfo/PictureInfo.styled';\nimport { useInView } from 'react-intersection-observer';\n\nconst ListPictures = memo(() => {\n  const [pictures, setPicures] = useState({});\n  const [inStock, setInStock] = useState({});\n  const [selectedItem, setSelectedItem] = useState('Всі');\n  const [loading, setLoading] = useState(false);\n\n  const [ref] = useInView({\n    threshold: 0.1,\n    triggerOnce: true,\n  });\n\n  const location = useLocation();\n  const [t] = useTranslation();\n\n  useEffect(() => {\n    setLoading(true);\n    getAllPictures()\n      .then(res => setPicures(res))\n      .finally(() => setLoading(false));\n  }, []);\n  \n  const onChangeHandlerInStock = event => {\n    setSelectedItem(event.target.name);\n    findInStockPict();\n  };\n\n  const onChangeHandler = event => {\n    setSelectedItem(event.target.name);\n  };\n\n  const places = [\n    t('gallaryPage.listPictures.livingRoom'),\n    t('gallaryPage.listPictures.kitchen'),\n    t('gallaryPage.listPictures.bedroom'),\n    t('gallaryPage.listPictures.childrenRoom'),\n    t('gallaryPage.listPictures.office'),\n  ];\n\n  const findInStockPict = () => {\n    let inStockPict = Object.values(pictures).filter(\n      item => item.inStock === 'так'\n    );\n    setInStock(inStockPict);\n  };\n\n  const getPicturesByPlaces = place => {\n    setPicures({});\n    setSelectedItem('Всі');\n    setLoading(true);\n    getPlacePictures(place)\n      .then(res => setPicures(res))\n      .finally(() => setLoading(false));\n  };\n\n  const getPictures = event => {\n    if (event.target.checked === false) {\n      setSelectedItem('Всі');\n      setLoading(true);\n      getAllPictures()\n        .then(res => setPicures(res))\n        .finally(() => setLoading(false));\n    }\n  };\n\n  if (!pictures || !inStock) {\n    return (\n      <>\n        <NavLinkButton to={'/painting'}>\n          <CommonButton text={t('button.back')} />\n        </NavLinkButton>\n        <DefaultComponent>\n          <ThreeDots />\n          <p>{t('defoultText')} </p>\n        </DefaultComponent>\n      </>\n    );\n  }\n  return (\n    <>\n      <NavLinkButton to={'/painting'}>\n        <CommonButton text={t('button.back')} />\n      </NavLinkButton>\n\n      <AboutOrder>{t('gallaryPage.aboutOrder')}</AboutOrder>\n\n      <WrapCheckboxes>\n        <WrapPlaces>\n          <NavPlaces>\n            <PlacesInput\n              id=\"menu-cb\"\n              type=\"checkbox\"\n              onChange={getPictures}\n            ></PlacesInput>\n            <LabPlaces htmlFor=\"menu-cb\">\n              {t('gallaryPage.listPictures.filters')}\n            </LabPlaces>\n            <PlacesContent>\n              <UlPlaces>\n                {places.map(place => (\n                  <LiPlaces key={place}>\n                    <TextPlace\n                      onClick={() => getPicturesByPlaces(place.toLowerCase())}\n                    >\n                      {place}\n                    </TextPlace>\n                  </LiPlaces>\n                ))}\n              </UlPlaces>\n            </PlacesContent>\n          </NavPlaces>\n        </WrapPlaces>\n\n        <WrapCheckBlok>\n          <label>\n            <Input\n              name=\"Всі\"\n              type=\"checkbox\"\n              onChange={onChangeHandler}\n              checked={selectedItem === 'Всі'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.all')}\n            </AllAndStockWords>\n          </label>\n          <label>\n            <Input\n              name=\"В наявності\"\n              type=\"checkbox\"\n              onChange={onChangeHandlerInStock}\n              checked={selectedItem === 'В наявності'}\n            />\n            <AllAndStockWords>\n              {t('gallaryPage.listPictures.inStock')}\n            </AllAndStockWords>\n          </label>\n        </WrapCheckBlok>\n      </WrapCheckboxes>\n\n      {loading && (\n        <WrapDots>\n          <ThreeDots />\n        </WrapDots>\n      )}\n      {selectedItem === 'Всі' && pictures.length === 0 && (\n        <DefaultComponent>\n          <p>{t('gallaryPage.listPictures.notForPlace')}</p>\n        </DefaultComponent>\n      )}\n      {selectedItem === 'Всі' ? (\n        <Ul>\n          {pictures &&\n            Object.values(pictures).map(({ title1, image, _id }) => (\n              <Li key={_id}>\n                <Link\n                  to={`/painting/list_pictures/${_id}`}\n                  state={{ from: location }}\n                >\n                  <WrapPicture ref={ref}>\n                    {loading && (\n                      <WrapDots>\n                        <ThreeDots />\n                      </WrapDots>\n                    )}\n                    <img\n                      loading=\"lazy\"\n                      src={`${S3_URL}/${image}`}\n                      alt={title1}\n                    />\n                    {/* {inView ? (\n                      <img src={`${BASIC_URL}/${image}`} alt={title1} />\n                    ) : (\n                      <div style={{width:'200px',height:'200px'}}>\n                        <ThreeDots />\n                      </div>\n                    )} */}\n                  </WrapPicture>\n                </Link>\n              </Li>\n            ))}\n        </Ul>\n      ) : Object.keys(inStock).length === 0 ? (\n        <DefaultComponent>\n          <p>{t('gallaryPage.listPictures.ifNotAvailable')}</p>\n        </DefaultComponent>\n      ) : (\n        <Ul>\n          {Object.values(inStock).map(({ title1, image, _id }) => (\n            <Li key={_id}>\n              <Link\n                to={`/painting/list_pictures/${_id}`}\n                state={{ from: location }}\n              >\n                <WrapPicture>\n                  <img src={`${S3_URL}/${image}`} alt={title1} />\n                </WrapPicture>\n              </Link>\n            </Li>\n          ))}\n        </Ul>\n      )}\n    </>\n  );\n});\n\nexport default ListPictures;\n"],"names":["React","observerMap","Map","root","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","RootIds","get","set","toString","optionsToId","options","Object","elements","thresholds","observer","IntersectionObserver","entries","forEach","key","map","id","instance","createObserver","entry","isIntersecting","some","intersectionRatio","threshold","trackVisibility","isVisible","target","callback","Array","isArray","sort","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","__publicField","node","triggerOnce","skip","InView","setState","initialInView","has","ListPictures","memo","useState","pictures","setPicures","inStock","setInStock","selectedItem","setSelectedItem","loading","setLoading","current","setRef","delay","_unobserveCb","ref","as","previousEntryTarget","useInView","handleChange","location","useLocation","useTranslation","t","useEffect","getAllPictures","then","res","finally","places","findInStockPict","inStockPict","values","filter","item","to","text","type","onChange","event","checked","htmlFor","place","onClick","getPlacePictures","getPicturesByPlaces","toLowerCase","name","Ul","title1","image","_id","Li","state","from","src","S3_URL","alt","keys"],"sourceRoot":""}